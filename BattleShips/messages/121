SUBJECT>How I was planning on doing it..
POSTER>Jim Veneskey
EMAIL>orcus@neo.rr.com
DATE>Tuesday, 25 May 1999, at 10:58 a.m.
EMAILNOTICES>no
IP_ADDRESS> REMOTE_HOST: ; REMOTE_ADDR: 149.23.131.71
PREVIOUS>120
NEXT> 122
IMAGE>
LINKNAME>
LINKURL>
<P>Here is the way I was and still am planning on implementing waypoints.<p> I right now have two arrays - one is called $number_waypoints[ship_id], when the impulser is first fired up this value is read from the sql server and contains how many waypoints each individual ship has. Another array is then filled in a nested loop: $waypoint[ship_id][number]. This two dimensional arrary contains ALL of the waypoints in the game. Currently the contents of the array is packed in a fashion similar to this "100:200:0:25", what this means is that this particular waypoint is at 100,200, a depth of 0 and a speed change of 25. Now - during the course of an impulse - all of the ship ids are ran through a loop and if $number_waypoints[$current_ship] > 0, then the waypoint (x,y value) for $waypoint[$current_ship][1] is extracted and the ships course is adjusted to aim at this destination just as if the player used the modify course routine. Also - this turn the distance to the waypoint is calculated and saved. The following turn the course is further adjusted (if needed) and the distance is calculated again. It is then compared to the last calculated distance. If it is GREATER than the last calculated distance - for my intents and purposes - we have arrived at our destination. (so we actually overshot it slightly - sue me) The waypoints are then shifted downward so what was waypoint #2 is now #1, #3 is now #2 etc etc. And the course is recalculated, speed is changed, depth is changed - and the ship is now headed for the second waypoint.<br> Now - if while the ship is on course for a waypoint and a course override is done via the ship modification page - the ship WILL start towards the new course, and the following impulse there is a chance is will now be a greater distance away from it's target than it was the previous impulse - so that will signal to the waypoint code that it has reached it's current waypoint - and will set course for the next one.<br> What I'll probably do is apon receipt of the manual course change, I'll set a flag that makes that ship immune to the waypoint determination logic, until a "resume waypoint" button is pressed.<br> also - the waypoint code will almost always have a two datapoints - the distance it was from it's destination last impulse and the distance this impulse. I'll find their difference and divide that into the current distance remaining. That will give me a very close approximate in impulses remaining w/out having to do any speed to knots conversions. Plus if you do a speed change override during the waypoint following it will take that into account and update the eta accordingly. (The eta may take a few impulses to stabilize as the ship accellerates or decellerates to the new ordered speed)<br> This will let the player change speed and depth w/out impacting the waypoint tracking logic - as long as the course is not overridden - the ship will continue on it's way. Of course I will have to check and see if the speed was reduced to 0 (which works now btw) since that would make the ships eta quite large...
